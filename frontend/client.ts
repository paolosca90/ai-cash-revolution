// Code generated by the Encore v1.49.1 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4000"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://${name}-zazrw.encr.app`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

const BROWSER = typeof globalThis === "object" && ("window" in globalThis);

/**
 * Client is an API client for the zazrw Encore application.
 */
export default class Client {
    public readonly analysis: analysis.ServiceClient
    public readonly frontend: frontend.ServiceClient
    public readonly ml: ml.ServiceClient
    public readonly user: user.ServiceClient
    private readonly options: ClientOptions
    private readonly target: string


    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions) {
        this.target = target
        this.options = options ?? {}
        const base = new BaseClient(this.target, this.options)
        this.analysis = new analysis.ServiceClient(base)
        this.frontend = new frontend.ServiceClient(base)
        this.ml = new ml.ServiceClient(base)
        this.user = new user.ServiceClient(base)
    }

    /**
     * Creates a new Encore client with the given client options set.
     *
     * @param options Client options to set. They are merged with existing options.
     **/
    public with(options: ClientOptions): Client {
        return new Client(this.target, {
            ...this.options,
            ...options,
        })
    }
}

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
}

export namespace analysis {
    export interface AssetReliability {
        symbol: string
        category: string
        reliabilityScore: number
        avgConfidence: number
        winRate: number
        recentPerformance: number
        volatility: "LOW" | "MEDIUM" | "HIGH"
        recommendation: "STRONG_BUY" | "BUY" | "HOLD" | "SELL" | "STRONG_SELL"
        lastAnalyzed: string
    }

    export interface AutoSignal {
        symbol: string
        direction: "LONG" | "SHORT"
        confidence: number
        entryPrice: number
        takeProfit: number
        stopLoss: number
        riskRewardRatio: number
        strategy: string
        timeframe: string
        analysis: {
            rsi: number
            macd: number
            trend: string
            volatility: string
        }
        createdAt: string
        tradeId: string
    }

    export interface ClosePositionRequest {
        ticket: number
    }

    export interface ClosePositionResponse {
        success: boolean
        closedPrice?: number
        profit?: number
        error?: string
    }

    export interface ExecuteRequest {
        tradeId: string
        lotSize?: number
        strategy?: TradingStrategy
    }

    export interface ExecuteResponse {
        success: boolean
        orderId?: number
        executionPrice?: number
        strategy?: TradingStrategy
        estimatedHoldingTime?: string
        error?: string
    }

    export interface FeedbackRequest {
        tradeId: string
        actualDirection: "LONG" | "SHORT"
        profitLoss: number
    }

    export interface FeedbackResponse {
        success: boolean
    }

    export interface GetPerformanceByStrategyResponse {
        performance: PerformanceByStrategy[]
    }

    export interface GetPerformanceBySymbolResponse {
        performance: PerformanceBySymbol[]
    }

    export interface GetTopSignalsResponse {
        signals: AutoSignal[]
    }

    export interface ListHistoryResponse {
        signals: TradingSignal[]
    }

    export interface ListPositionsResponse {
        positions: MT5Position[]
    }

    export interface MT5Position {
        ticket: number
        symbol: string
        type: number
        volume: number
        openPrice: number
        currentPrice: number
        profit: number
        swap: number
        comment: string
    }

    export interface MarketNews {
        id: string
        title: string
        summary: string
        impact: "HIGH" | "MEDIUM" | "LOW"
        affectedAssets: string[]
        source: string
        publishedAt: string
        sentiment: "POSITIVE" | "NEGATIVE" | "NEUTRAL"
    }

    export interface MarketOverview {
        topAssets: AssetReliability[]
        marketNews: MarketNews[]
        marketSentiment: {
            overall: "BULLISH" | "BEARISH" | "NEUTRAL"
            forex: "BULLISH" | "BEARISH" | "NEUTRAL"
            indices: "BULLISH" | "BEARISH" | "NEUTRAL"
            commodities: "BULLISH" | "BEARISH" | "NEUTRAL"
            crypto: "BULLISH" | "BEARISH" | "NEUTRAL"
        }
        sessionInfo: {
            currentSession: "ASIAN" | "EUROPEAN" | "US" | "OVERLAP" | "DEAD"
            nextSession: string
            timeToNext: string
            volatilityExpected: "LOW" | "MEDIUM" | "HIGH"
        }
    }

    export interface PerformanceByStrategy {
        strategy: string
        totalTrades: number
        winRate: number
        totalProfitLoss: number
        avgConfidence: number
        avgHoldingTime: number
    }

    export interface PerformanceBySymbol {
        symbol: string
        totalTrades: number
        winRate: number
        totalProfitLoss: number
        avgConfidence: number
        bestTrade: number
        worstTrade: number
    }

    export interface PerformanceStats {
        totalTrades: number
        winRate: number
        avgProfit: number
        avgLoss: number
        profitFactor: number
        bestTrade: number
        worstTrade: number
        avgConfidence: number
        totalProfitLoss: number
        currentStreak: number
        maxDrawdown: number
        sharpeRatio: number
    }

    export interface PredictRequest {
        symbol: string
        strategy?: TradingStrategy
    }

    export interface TradingSignal {
        tradeId: string
        symbol: string
        direction: "LONG" | "SHORT"
        strategy: TradingStrategy
        entryPrice: number
        takeProfit: number
        stopLoss: number
        confidence: number
        riskRewardRatio: number
        recommendedLotSize: number
        maxHoldingTime: number
        expiresAt: string
        chartUrl?: string
        strategyRecommendation: string
        analysis: any
    }

    export type TradingStrategy = "SCALPING" | "INTRADAY"

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.closePosition = this.closePosition.bind(this)
            this.execute = this.execute.bind(this)
            this.forceSignalGeneration = this.forceSignalGeneration.bind(this)
            this.getDetailedPerformance = this.getDetailedPerformance.bind(this)
            this.getMarketOverview = this.getMarketOverview.bind(this)
            this.getPerformance = this.getPerformance.bind(this)
            this.getPerformanceByStrategy = this.getPerformanceByStrategy.bind(this)
            this.getPerformanceBySymbol = this.getPerformanceBySymbol.bind(this)
            this.getSignalStats = this.getSignalStats.bind(this)
            this.getTopSignals = this.getTopSignals.bind(this)
            this.listHistory = this.listHistory.bind(this)
            this.listPositions = this.listPositions.bind(this)
            this.predict = this.predict.bind(this)
            this.recordFeedback = this.recordFeedback.bind(this)
        }

        /**
         * Closes an open position on MetaTrader 5.
         */
        public async closePosition(params: ClosePositionRequest): Promise<ClosePositionResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/analysis/close-position`, JSON.stringify(params))
            return await resp.json() as ClosePositionResponse
        }

        /**
         * Executes a trading signal on MetaTrader 5.
         */
        public async execute(params: ExecuteRequest): Promise<ExecuteResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/analysis/execute`, JSON.stringify(params))
            return await resp.json() as ExecuteResponse
        }

        /**
         * Force generation of new signals (for manual refresh)
         */
        public async forceSignalGeneration(): Promise<{
    /**
     * Force generation of new signals (for manual refresh)
     */
    success: boolean

    /**
     * Force generation of new signals (for manual refresh)
     */
    message: string
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/analysis/force-signal-generation`)
            return await resp.json() as {
    /**
     * Force generation of new signals (for manual refresh)
     */
    success: boolean

    /**
     * Force generation of new signals (for manual refresh)
     */
    message: string
}
        }

        /**
         * Get detailed performance breakdown by time periods
         */
        public async getDetailedPerformance(): Promise<{
    daily: PerformanceStats[]
    weekly: PerformanceStats[]
    monthly: PerformanceStats[]
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/analysis/performance/detailed`)
            return await resp.json() as {
    daily: PerformanceStats[]
    weekly: PerformanceStats[]
    monthly: PerformanceStats[]
}
        }

        /**
         * Retrieves market overview with top performing assets and relevant news.
         */
        public async getMarketOverview(): Promise<MarketOverview> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/analysis/market-overview`)
            return await resp.json() as MarketOverview
        }

        /**
         * Retrieves AI model performance statistics based on real trading results.
         */
        public async getPerformance(): Promise<PerformanceStats> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/analysis/performance`)
            return await resp.json() as PerformanceStats
        }

        /**
         * Get performance by strategy
         */
        public async getPerformanceByStrategy(): Promise<GetPerformanceByStrategyResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/analysis/performance/by-strategy`)
            return await resp.json() as GetPerformanceByStrategyResponse
        }

        /**
         * Get performance by symbol
         */
        public async getPerformanceBySymbol(): Promise<GetPerformanceBySymbolResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/analysis/performance/by-symbol`)
            return await resp.json() as GetPerformanceBySymbolResponse
        }

        /**
         * Get real-time signal statistics
         */
        public async getSignalStats(): Promise<{
    totalGenerated: number
    totalExecuted: number
    totalClosed: number
    avgConfidence: number
    topPerformingSymbol: string
    lastGenerationTime: string | null
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/analysis/signal-stats`)
            return await resp.json() as {
    totalGenerated: number
    totalExecuted: number
    totalClosed: number
    avgConfidence: number
    topPerformingSymbol: string
    lastGenerationTime: string | null
}
        }

        /**
         * Retrieves the top 3 real trading signals from the auto-generation system.
         */
        public async getTopSignals(): Promise<GetTopSignalsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/analysis/top-signals`)
            return await resp.json() as GetTopSignalsResponse
        }

        /**
         * Retrieves the trading history.
         */
        public async listHistory(): Promise<ListHistoryResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/analysis/history`)
            return await resp.json() as ListHistoryResponse
        }

        /**
         * Retrieves the open positions from MT5 account.
         */
        public async listPositions(): Promise<ListPositionsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/analysis/positions`)
            return await resp.json() as ListPositionsResponse
        }

        /**
         * Generates AI-powered trading predictions with automatic NY session closure.
         */
        public async predict(params: PredictRequest): Promise<TradingSignal> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/analysis/predict`, JSON.stringify(params))
            return await resp.json() as TradingSignal
        }

        /**
         * Records trading results for AI model improvement.
         */
        public async recordFeedback(params: FeedbackRequest): Promise<FeedbackResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/analysis/feedback`, JSON.stringify(params))
            return await resp.json() as FeedbackResponse
        }
    }
}

export namespace frontend {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.assets = this.assets.bind(this)
        }

        public async assets(path: string[]): Promise<void> {
            await this.baseClient.callTypedAPI("HEAD", `/frontend/${path.map(encodeURIComponent).join("/")}`)
        }
    }
}

export namespace ml {
    export interface MLAnalytics {
        modelPerformance: {
            accuracy: number
            precision: number
            recall: number
            f1Score: number
            sharpeRatio: number
            maxDrawdown: number
        }
        predictionStats: {
            totalPredictions: number
            correctPredictions: number
            avgConfidence: number
            winRate: number
            profitFactor: number
        }
        featureImportance: {
            feature: string
            importance: number
            type: string
        }[]
        learningProgress: {
            epoch: number
            trainingLoss: number
            validationLoss: number
            accuracy: number
        }[]
        marketPatterns: {
            pattern: string
            type: string
            confidence: number
            successRate: number
            avgProfit: number
            detectedAt: string
        }[]
        performanceTimeline: {
            date: string
            accuracy: number
            profitLoss: number
            predictions: number
        }[]
        adaptiveParameters: {
            parameter: string
            currentValue: number
            previousValue: number
            adaptationReason: string
            performanceImprovement: number
        }[]
        signalAnalytics: {
            successRateBySymbol: {
                symbol: string
                totalSignals: number
                successfulSignals: number
                successRate: number
                avgGenerationTime: number
            }[]
            performanceByConditions: {
                sessionType: string
                volatilityState: string
                signalCount: number
                avgConfidence: number
                successfulCount: number
            }[]
            trendAnalysis: {
                hour: string
                signalsGenerated: number
                avgConfidence: number
                successfulSignals: number
            }[]
        }
        mlTrainingInsights: {
            totalTrainingRecords: number
            accuracyBySymbol: {
                symbol: string
                accuracy: number
                sampleSize: number
            }[]
            confidenceCalibration: {
                confidenceRange: string
                actualSuccessRate: number
                sampleSize: number
            }[]
            marketConditionPerformance: {
                condition: string
                accuracy: number
                avgProfitLoss: number
                sampleSize: number
            }[]
        }
    }

    export interface TrainingRequest {
        modelName?: string
        epochs?: number
        learningRate?: number
    }

    export interface TrainingResponse {
        success: boolean
        metrics: {
            accuracy: number
            precision: number
            recall: number
            f1Score: number
        }
        trainingTime: number
        recommendations: string[]
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.detectPatterns = this.detectPatterns.bind(this)
            this.getMLAnalytics = this.getMLAnalytics.bind(this)
            this.getMLTrainingAnalytics = this.getMLTrainingAnalytics.bind(this)
            this.getRecommendations = this.getRecommendations.bind(this)
            this.trainModel = this.trainModel.bind(this)
        }

        /**
         * Triggers pattern detection for a specific symbol.
         */
        public async detectPatterns(params: {
    /**
     * Triggers pattern detection for a specific symbol.
     */
    symbol: string
}): Promise<{
    /**
     * Triggers pattern detection for a specific symbol.
     */
    success: boolean

    /**
     * Triggers pattern detection for a specific symbol.
     */
    patternsDetected: number
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/ml/detect-patterns`, JSON.stringify(params))
            return await resp.json() as {
    /**
     * Triggers pattern detection for a specific symbol.
     */
    success: boolean

    /**
     * Triggers pattern detection for a specific symbol.
     */
    patternsDetected: number
}
        }

        /**
         * Retrieves comprehensive ML analytics and performance metrics.
         */
        public async getMLAnalytics(): Promise<MLAnalytics> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/ml/analytics`)
            return await resp.json() as MLAnalytics
        }

        /**
         * Get comprehensive analytics for ML model improvement
         */
        public async getMLTrainingAnalytics(): Promise<{
    trainingData: any[]
    insights: any
    recommendations: string[]
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/ml/training-analytics`)
            return await resp.json() as {
    trainingData: any[]
    insights: any
    recommendations: string[]
}
        }

        /**
         * Gets ML model recommendations for optimization.
         */
        public async getRecommendations(): Promise<{
    /**
     * Gets ML model recommendations for optimization.
     */
    recommendations: string[]
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/ml/recommendations`)
            return await resp.json() as {
    /**
     * Gets ML model recommendations for optimization.
     */
    recommendations: string[]
}
        }

        /**
         * Triggers ML model training and returns performance metrics.
         */
        public async trainModel(params: TrainingRequest): Promise<TrainingResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/ml/train`, JSON.stringify(params))
            return await resp.json() as TrainingResponse
        }
    }
}

export namespace user {
    export interface Mt5Config {
        userId: number
        host: string
        port: number
        login: string
        server: string
    }

    export interface Subscription {
        userId: number
        plan: "free" | "pro" | "enterprise"
        status: "active" | "inactive" | "past_due"
        expiresAt: string | null
    }

    export interface UserPreferences {
        userId: number
        riskPercentage: number
        accountBalance: number
        updatedAt: string
    }

    export interface Mt5Status {
        isConnected: boolean
        isValidating: boolean
        accountInfo?: {
            balance: number
            equity: number
            margin: number
            freeMargin: number
            marginLevel: number
            name: string
            server: string
            currency: string
            leverage: number
            company: string
        }
        lastUpdate?: string
        error?: string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.getMt5Config = this.getMt5Config.bind(this)
            this.getMt5Status = this.getMt5Status.bind(this)
            this.testMt5Connection = this.testMt5Connection.bind(this)
            this.getPreferences = this.getPreferences.bind(this)
            this.getSubscription = this.getSubscription.bind(this)
            this.updateMt5Config = this.updateMt5Config.bind(this)
            this.updatePreferences = this.updatePreferences.bind(this)
        }

        /**
         * getMt5Config returns the MT5 configuration for the demo user.
         */
        public async getMt5Config(): Promise<{
    /**
     * getMt5Config returns the MT5 configuration for the demo user.
     */
    config: Mt5Config | null
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/user/mt5-config`)
            return await resp.json() as {
    /**
     * getMt5Config returns the MT5 configuration for the demo user.
     */
    config: Mt5Config | null
}
        }

        /**
         * getPreferences returns the trading preferences for the demo user.
         */
        public async getPreferences(): Promise<{
    /**
     * getPreferences returns the trading preferences for the demo user.
     */
    preferences: UserPreferences | null
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/user/preferences`)
            return await resp.json() as {
    /**
     * getPreferences returns the trading preferences for the demo user.
     */
    preferences: UserPreferences | null
}
        }

        /**
         * getSubscription returns the subscription status for the demo user.
         */
        public async getSubscription(): Promise<{
    /**
     * getSubscription returns the subscription status for the demo user.
     */
    subscription: Subscription | null
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/user/subscription`)
            return await resp.json() as {
    /**
     * getSubscription returns the subscription status for the demo user.
     */
    subscription: Subscription | null
}
        }

        /**
         * updateMt5Config updates the MT5 configuration for the demo user.
         */
        public async updateMt5Config(params: {
    host: string
    port: number
    login: string
    server: string
    /**
     * updateMt5Config updates the MT5 configuration for the demo user.
     */
    password?: string
}): Promise<{
    /**
     * updateMt5Config updates the MT5 configuration for the demo user.
     */
    success: boolean
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/user/mt5-config`, JSON.stringify(params))
            return await resp.json() as {
    /**
     * updateMt5Config updates the MT5 configuration for the demo user.
     */
    success: boolean
}
        }

        /**
         * updatePreferences updates the trading preferences for the demo user.
         */
        public async updatePreferences(params: {
    /**
     * updatePreferences updates the trading preferences for the demo user.
     */
    riskPercentage: number

    /**
     * updatePreferences updates the trading preferences for the demo user.
     */
    accountBalance: number
}): Promise<{
    /**
     * updatePreferences updates the trading preferences for the demo user.
     */
    success: boolean
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/user/preferences`, JSON.stringify(params))
            return await resp.json() as {
    /**
     * updatePreferences updates the trading preferences for the demo user.
     */
    success: boolean
}
        }

        /**
         * getMt5Status returns the current MT5 connection status for the demo user.
         */
        public async getMt5Status(): Promise<{
            status: Mt5Status
        }> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/user/mt5-status`)
            return await resp.json() as {
                status: Mt5Status
            }
        }

        /**
         * testMt5Connection tests the connection with provided MT5 configuration.
         */
        public async testMt5Connection(params: {
            host: string
            port: number
            login: string
            password: string
            server: string
        }): Promise<{
            status: Mt5Status
        }> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/user/mt5-test`, JSON.stringify(params))
            return await resp.json() as {
                status: Mt5Status
            }
        }
    }
}



function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "method" | "body" | "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}


// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {}

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if (!BROWSER) {
            this.headers["User-Agent"] = "zazrw-Generated-TS-Client (Encore/v1.49.1)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callTypedAPI makes an API call, defaulting content type to "application/json"
    public async callTypedAPI(method: string, path: string, body?: RequestInit["body"], params?: CallParameters): Promise<Response> {
        return this.callAPI(method, path, body, {
            ...params,
            headers: { "Content-Type": "application/json", ...params?.headers }
        });
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(method: string, path: string, body?: RequestInit["body"], params?: CallParameters): Promise<Response> {
        let { query, headers, ...rest } = params ?? {}
        const init = {
            ...this.requestInit,
            ...rest,
            method,
            body: body ?? null,
        }

        // Merge our headers with any predefined headers
        init.headers = {...this.headers, ...init.headers, ...headers}

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                init.headers = {...init.headers, ...authData.headers};
            }
        }

        // Make the actual request
        const queryString = query ? '?' + encodeQuery(query) : ''
        const response = await this.fetcher(this.baseURL+path+queryString, init)

        // handle any error responses
        if (!response.ok) {
            // try and get the error message from the response body
            let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

            // if we can get the structured error we should, otherwise give a best effort
            try {
                const text = await response.text()

                try {
                    const jsonBody = JSON.parse(text)
                    if (isAPIErrorResponse(jsonBody)) {
                        body = jsonBody
                    } else {
                        body.message += ": " + JSON.stringify(jsonBody)
                    }
                } catch {
                    body.message += ": " + text
                }
            } catch (e) {
                // otherwise we just append the text to the error message
                body.message += ": " + String(e)
            }

            throw new APIError(response.status, body)
        }

        return response
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}
