import { api } from "encore.dev/api";
import { getMT5Positions, MT5Position } from "./mt5-bridge";
import { analysisDB } from "./db";
import { user } from "~encore/clients";

interface ListPositionsResponse {
  positions: MT5Position[];
}

// Retrieves the open positions from MT5 account.
export const listPositions = api<void, ListPositionsResponse>({
  method: "GET",
  path: "/analysis/positions",
  expose: true,
}, async () => {
  try {
    // Fetch the MT5 configuration from the single source of truth
    const { config: mt5Config } = await user.getMt5Config();
    if (!mt5Config) {
      console.log("MT5 configuration not set up, cannot fetch positions.");
      return { positions: [] };
    }

    console.log("Fetching positions from MT5");

    // Get all open positions from the MT5 terminal
    const allPositions = await getMT5Positions(mt5Config);
    console.log(`Retrieved ${allPositions.length} positions from MT5`);

    // Get all executed trade IDs from our system
    const userTradeSignals = await analysisDB.queryAll`
      SELECT trade_id, mt5_order_id FROM trading_signals
      WHERE status = 'executed' AND mt5_order_id IS NOT NULL
    `;
    
    console.log(`Found ${userTradeSignals.length} executed trades in database`);

    // Create a map of MT5 order IDs to trade IDs for faster lookup
    const orderIdToTradeId = new Map();
    userTradeSignals.forEach(signal => {
      if (signal.mt5_order_id) {
        orderIdToTradeId.set(Number(signal.mt5_order_id), signal.trade_id);
      }
    });

    // Filter positions to only include those generated by our signals
    // Match by MT5 order ID (ticket number) or by comment containing trade ID
    const userPositions = allPositions.filter(position => {
      // Method 1: Match by MT5 order ID (ticket)
      if (orderIdToTradeId.has(position.ticket)) {
        console.log(`Found position ${position.ticket} matching trade ID ${orderIdToTradeId.get(position.ticket)}`);
        return true;
      }
      
      // Method 2: Match by comment containing trade ID pattern
      if (position.comment) {
        const tradeIdMatch = position.comment.match(/[A-Z]{3}-\d{6,8}/);
        if (tradeIdMatch) {
          const tradeIdFromComment = tradeIdMatch[0];
          const hasMatchingTrade = userTradeSignals.some(signal => signal.trade_id === tradeIdFromComment);
          if (hasMatchingTrade) {
            console.log(`Found position ${position.ticket} with comment containing trade ID ${tradeIdFromComment}`);
            return true;
          }
        }
      }
      
      return false;
    });

    console.log(`Filtered to ${userPositions.length} user-specific positions`);
    
    // Log details of found positions for debugging
    userPositions.forEach(pos => {
      console.log(`Position: ${pos.ticket} | Symbol: ${pos.symbol} | Type: ${pos.type === 0 ? 'BUY' : 'SELL'} | Volume: ${pos.volume} | Profit: ${pos.profit} | Comment: ${pos.comment}`);
    });

    return { positions: userPositions };

  } catch (error) {
    console.error(`Error getting positions:`, error);
    // Return empty array instead of throwing error to prevent UI crashes
    return { positions: [] };
  }
});
